/**
 * Generated by the Babylon.JS Editor v4.7.0
 */

import { Scene } from "@babylonjs/core/scene";

import { PointerEventTypes, KeyboardEventTypes } from "@babylonjs/core";

/**
 * Tells that this script has been generated by a graph.
 */
export const IsGraph: boolean = true;

/**
 * Tells wether or not the graph has been attached to at least one node or not.
 */
export let IsGraphAttached: boolean = false;

/**
 * Defines the generated class of the graph.
 */
export default class GraphClass {


	/**
	 * Constructor.
	 * @param scene defines the scene where the graph is running.
	 */
	public constructor(private _scene: Scene, private _attachedObject: any) {

	}

	/**
	 * Called on the scene starts.
	 */
	public onStart(): void {

		this._scene.onPointerObservable.add((ev) => {
			if (ev.type !== PointerEventTypes.POINTERTAP) {
				return;
			}

			if (!this._scene.getEngine().isPointerLock) {
				this._scene.getEngine().enterPointerlock();
			}
		});

		this._scene.onKeyboardObservable.add((ev) => {
			if (ev.type !== KeyboardEventTypes.KEYUP) {
				return;
			}

			if (ev.event.keyCode === 27) {
				if (this._scene.getEngine().isPointerLock) {
					this._scene.getEngine().exitPointerlock();
				}
			}
		});

	}

	/**
	 * Called each frame.
	 */
	public onUpdate(): void {

	}

	/**
	 * Returns the reference to the current scene the graph is running.
	 */
	public getScene(): Scene {
		return this._scene;
	}

	/**
	 * Returns the reference to the object the graph is attached to.
	 */
	public getAttachedObject<T>(): T {
		return this._attachedObject;
	}
}
